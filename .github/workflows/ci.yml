name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: make test

      - name: Build
        run: make

      - name: Upload demo artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-build
          path: dist-demo/

  deploy-gh-pages:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download demo artifacts
        uses: actions/download-artifact@v4
        with:
          name: demo-build
          path: dist-demo/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist-demo
          publish_branch: gh-pages
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com

  auto-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Check if version already released
        id: check-release
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package_version=v$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          # Check if tag already exists
          if git tag -l | grep -q "^v$PACKAGE_VERSION$"; then
            echo "Tag v$PACKAGE_VERSION already exists"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v$PACKAGE_VERSION does not exist, will create release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        if: steps.check-release.outputs.should_release == 'true'
        id: generate-notes
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            # If no previous tag, get all commits
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## Version $PACKAGE_VERSION

          ### Changes
          $COMMITS

          ### Full Changelog
          See the [commit history](https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v$PACKAGE_VERSION) for more details.
          EOF

          echo "Generated release notes:"
          cat release_notes.md

      - name: Create Release
        if: steps.check-release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check-release.outputs.package_version }}
          name: Release ${{ steps.check-release.outputs.package_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
